        -:    0:Source:conversions.c
        -:    0:Graph:conversions.gcno
        -:    0:Data:conversions.gcda
        -:    0:Runs:9
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:
        -:    4:/**
        -:    5: * Converts specified value into new base and prints to stdout
        -:    6: * Arguments: long input = the input value to be changed, int base = the new base the value will be changed to
        -:    7: * Outputs: Outputs to stdout the newly converted input
        -:    8: * Returns: none
        -:    9: */
       81:   10:void convert_by_recursion(long input, int base) {
       81:   11:    const char digits[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
       81:   12:    if (input == 0) {
       22:   13:        return;
       59:   14:    } else if (input < 0) {
        6:   15:        printf("-");
        6:   16:        input *= -1;
        -:   17:    }
        -:   18:
       59:   19:    convert_by_recursion(input / base, base);
        -:   20:
       59:   21:    printf("%c", digits[input % base]);
        -:   22:}
        -:   23:
        -:   24:/**
        -:   25: * Converts numbers within a range into a new specified base
        -:   26: * Arguments: long input = the input value to be changed
        -:   27: *            int base = the new base the value will be changed to
        -:   28: *            long start = start value of loop
        -:   29: *            long finish = finish value of loop
        -:   30: * Outputs: Outputs to stdout the newly converted number using convert_by_recursion()
        -:   31: * Returns: none
        -:   32: */
        1:   33:void convert_by_range(long input, int base, long start, long finish) {
        7:   34:    for (long i = start; i <= finish; i++) {
        6:   35:        if (i == 0) {
        1:   36:            printf("0\n");
        1:   37:            i++;
        -:   38:        }
        -:   39:
        6:   40:        convert_by_recursion(i, base);
        -:   41:
        6:   42:        printf("\n");
        -:   43:    }
        1:   44:}
